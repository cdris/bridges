#!/usr/bin/python3 -u
import sys
import socket
import select
import json
import time
import random

# represents a bridge which has an id, a root bridge, root port, cost to root, and a
# designated bridge
class Bridge:
    def __init__(self, id, num_ports):
        self.id = id
        self.root = id
        self.rootPort = -1
        self.cost = 0
        self.desBridge = id
        self.bpdus = {}
        self.num_ports = num_ports

    # adds a source to the bridge's bpdus, or updates it if it already exists
    def update_bpdus(self, source, message, result, portno):
        now = current_milliseconds()
        if source in self.bpdus:
            self.bpdus[source][portno] = (message, now, result)
        else:
            self.bpdus[source] = [(None, -1, False)] * self.num_ports
            self.bpdus[source][portno] = (message, now, result)
    
    def scrub_bpdus(self):
        for source, ports in self.bpdus.items():
            for i in range(self.num_ports):
                if current_milliseconds() - ports[i][1] > 750:
                    ports[i] = (None, -1, False)
    
    def reopen(self, ports):
        temp = [True] * self.num_ports
        for ports_times in self.bpdus.values():
            for i in range(self.num_ports):
                temp[i] = temp[i] and ports_times[i][1] == -1
        for i in range(self.num_ports):
            if temp[i] and not ports[i].flag and ports[i].alive:
                ports[i].flag = True
                print('Reopened port %s/%d due to bpdu timeout' % (bridge.id, i)) 
   
    def port_result(self, port):
        temp = False
        for value in self.bpdus.values():
            temp = temp or value[port][2]
        return temp

# represents a port which has a socket, most recent bpdu, open flag, and timeout
class Port:
    def __init__(self, socket):
        self.port = socket
        self.alive = True
        self.flag = True

    # returns this port's socket's fileno
    def fileno(self):
        return self.port.fileno()

# gets the current milliseconds
def current_milliseconds():
    return int(round(time.time() * 1000))

# pads the name with null bytes at the end
def pad(name):
    result = '\0' + name
    while len(result) < 108:
        result += '\0'
    return result

# sends a bpdu to all given ports
def bpdu(bridge, ports):
    for key, value in ports.items():
        broadcast(bridge.id, "ffff", 'bpdu',
                  {'portkey': key, 'designated': bridge.desBridge,
                   'root': bridge.root, 'cost': bridge.cost},
                  value.port)

# sends a json message on the given port
def broadcast(source, destination, type, message, port):
    port.send(json.JSONEncoder().encode({'source': source,
                                         'dest': destination,
                                         'type': type,
                                         'message': message}).encode())

# reads from the given port and decodes the json
def read_message(port):
    return json.JSONDecoder().decode(port.port.recv(1500).decode())

# handles a bpdu
def handle_bpdu(bridge, msgPort, message, ports):
    msgBridge = message['source']
    msgRoot = message['root']
    msgCost = message['cost']
    msgPortStruct = ports[msgPort]
    msgDes = message['designated']
    bridge.update_bpdus(msgBridge, message, False, msgPort)
    # handles the case in which bridge info changes based on the new bpdu
    if (msgRoot < bridge.root) or \
       (not ((msgRoot > bridge.root) or (msgCost + 1 > bridge.cost)) and \
       ((msgCost + 1 < bridge.cost) or (msgBridge < bridge.desBridge))):
        if bridge.root != msgRoot:
            print('New root: %s/%s' % (bridge.id, msgRoot))
        if bridge.rootPort != msgPort:
            print('Root port: %s/%d' % (bridge.id, msgPort))
            ports[msgPort].flag = True
            bridge.bpdus[msgBridge][msgPort] = (message, True, current_milliseconds())
            print('port %d reopened due to bpdu' % (msgPort))
        bridge.root = msgRoot
        bridge.rootPort = msgPort
        bridge.cost = msgCost + 1
        bridge.desBridge = msgBridge
        bpdu(bridge, ports)
    # decides how to kill ports
    if msgBridge == bridge.id:
        msgKey = message['portkey']
        if bridge.bpdus[msgBridge][msgKey][1] != -1 and ports[msgKey].flag \
            and ports[msgKey].alive:
            msgPortStruct.flag = False
            msgPortStruct.alive = False
            for source in bridge.bpdus.keys():
                bridge.bpdus[source][msgPort] = (None, -1, False)
            print('Killed %s/%d' % (bridge.id, msgPort))
        return
    # decides how to close ports
    if msgDes == bridge.id:
        b = True
        for i in range(bridge.num_ports):
            b = b and not (bridge.bpdus[msgBridge][i] != -1 and ports[i].flag and ports[i].alive)
        if b:
            if not msgPortStruct.flag:
                print('Designated port: %s/%d' % (bridge.id, msgPort))
                msgPortStruct.flag = True
            bridge.bpdus[msgBridge][msgPort] = (message, True, current_milliseconds())
            return
    if msgCost == bridge.cost and msgRoot == bridge.root:
        b = True
        for source, ports_times in bridge.bpdus.items():
            msg_timeout = ports_times[msgPort]
            b = b and (msg_timeout[1] == -1 or msg_timeout[0] == None or \
                (msg_timeout[0]['cost'] == bridge.cost \
                and msg_timeout[0]['root'] == bridge.root \
                and bridge.id < source))
        if b:
            if not msgPortStruct.flag:
                print('Designated port: %s/%d' % (bridge.id, msgPort))
                msgPortStruct.flag = True
            bridge.bpdus[msgBridge][msgPort] = (message, True, current_milliseconds())
            return
    if msgPortStruct.flag and msgPort != bridge.rootPort and not bridge.port_result(msgPort):
        msgPortStruct.flag = False
        print('Disabled port: %s/%d' % (bridge.id, msgPort))        
                

# handles a data message
def handle_data(source, destination, type, message, msgPort, fft, ports):
    msgID = message['id']
    print('Received message %d on port %d from %s to %s' % (msgID, msgPort, source, destination))
    try:  # ensures that the destination is in the fft, otherwise broadcasts everywhere
        portInfo = fft[destination]
        if portInfo[0] == msgPort:  # message is not sent if it would go out on the same port
            print('Not forwarding message %d, source/port = %s/%d' % (msgID, source, msgPort))
        elif ports[portInfo[0]].flag and ports[portInfo[0]].alive:
        # makes sure the destination port is open
            print('Forwarding message %d to port %d' % (msgID, portInfo[0]))
            broadcast(source, destination, type, message, ports[portInfo[0]].port)
        else:
            print('Broadcasting message %d to all ports' % msgID)
            for key, value in ports.items():
                if key != msgPort and value.flag and value.alive:
                    broadcast(source, destination, type, message, value.port)
    except KeyError:
        print('Broadcasting message %d to all ports' % msgID)
        for key in ports.keys():
            if key != msgPort and ports[key].flag and ports[key].alive:
                broadcast(source, destination, type, message, ports[key].port)

# updates the given fft with new source information
def update_fft(fft, source, msgPort):
    fft[source] = [msgPort, current_milliseconds()]

# returns a new fft which only includes the entries from the given fft that have not timed out
def scrub_fft(fft):
    newFFT = {}
    for key, value in fft.items():
        if current_milliseconds() - value[1] < 5000:
            newFFT[key] = value
    return newFFT

# main
if __name__ == "__main__":
    LAN = sys.argv[2:]
    # our bridge object, holds onto id, root, root port, etc
    bridge = Bridge(sys.argv[1], len(LAN))
    # dictionary with each key being the port number, each value is a port object
    ports = {}
    # timestamp in milliseconds of the last bpdu received
    lastBPDU = 0
    # dictionary with each key being the destination, each value is list of port number, timestamp
    fft = {}

    # creates sockets and connects to them
    for x in range(len(LAN)):
        s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        s.connect(pad(LAN[x]))
        ports[x] = Port(s)
    
    print("Bridge %s starting up" % bridge.id)

    # Main loop
    while True:
        # sends out a new bpdu if 500ms have passed since the last one was sent
        if current_milliseconds() - lastBPDU >= 500:
            bpdu(bridge, ports)
            lastBPDU = current_milliseconds()
        # scrubs out old entries from the fft
        fft = scrub_fft(fft)
        bridge.scrub_bpdus()
        bridge.reopen(ports)

        ready, ignore, ignore2 = select.select(ports.values(), [], [], 0.25)

        # Reads from each of the ports
        for key, port in ports.items():
            # only reads from a port if it's ready
            if port in ready and port.alive:
                msg = read_message(port)
                # ensures there were no issues reading the message
                if msg:
                    source = msg['source']
                    destination = msg['dest']
                    type = msg['type']
                    message = msg['message']
                    # handles a bpdu message
                    if type == 'bpdu':
                        message['source'] = source
                        # changes the port's most recent bpdu to the new message
                        handle_bpdu(bridge, key, message, ports)
                   # handles a data message
                    elif type == 'data' and port.flag:
                        # only acts on the data message if the port it came in on is open
                        # updates the fft with the new source info
                        update_fft(fft, source, key)
                        handle_data(source, destination,
                                    type, message, key,
                                    fft, ports)
